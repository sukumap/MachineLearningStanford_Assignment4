function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%


% Lets add 1 to x
X = [ones(m, 1) X];

%Lets calculate layer 2 hidden unit value
z2= X * Theta1';
a2 = sigmoid(z2);
%a2 is now a matrix with 5000 * 25

a2 = [ones(m,1) a2];
%a2 becomes a matrix with 5000 *26

z3 = a2 * Theta2';
a3 = sigmoid(z3);

%a3 becomes 5000 * 10 

%a3 = 5000 *10
cost_function_1 = 0;
for i=1:m,
    for k=1:num_labels,
        summation =-((k==y(i))*log(a3(i,k))) - (1-(k==y(i))) * log (1-a3(i,k));
        cost_function_1 = cost_function_1 + summation;
    end
end    
J= cost_function_1/m;

% Add regularization
theta1_reg_rows = size(Theta1,1);
theta1_reg_columns = size(Theta1,2);
theta2_reg_rows = size(Theta2,1);
theta2_reg_columns = size(Theta2,2);
theta1_reg=0;
theta2_reg=0;
for j=1:theta1_reg_rows,
    for k=2:theta1_reg_columns,
        theta1_reg = theta1_reg + (Theta1(j,k) * Theta1(j,k));
    end
end

for j=1:theta2_reg_rows,
    for k=2:theta2_reg_columns,
        theta2_reg = theta2_reg + (Theta2(j,k) * Theta2(j,k));
    end
end

J=J+((lambda/(2*m))*(theta1_reg+theta2_reg));
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
A1 = zeros(1,size(X,2));
Z2 = zeros(1,size(Theta1,1));
A2 = zeros(1,size(Theta1,1));
DELTA1 = zeros(size(Theta1));
DELTA2 = zeros(size(Theta2));
for i=1:m,
    %Z2 size is 1*25    
    Z2 = X(i,:) * Theta1';
    A2 = sigmoid(Z2);
    %size(A2) = 1*26
    A2 = [1 A2];
    Z3 = A2 * Theta2';
    %A3 is 1*10
    A3 = sigmoid(Z3);
    Delta3= A3;
    for k=1:size(Theta2,1),
         Delta3(1,k) = A3(1,k)-(y(i)==k);
    end
    % 10*1
    Delta3Transpose = Delta3';
% Z2 Transpose
    Z2Transpose = Z2';
    % Z2 TRANSPOSE IS % 26*1    
    Z2Transpose = [1;Z2Transpose];
    % Delta2 = (26 *1).*(26 * 1)
    Delta2 = ((Theta2') * Delta3Transpose).*(sigmoidGradient(Z2Transpose));
    %DELTA2 = 10*1*1*26
    DELTA2 = DELTA2+ (Delta3Transpose * A2);
    %DELTA1= 25*1 * 1*401
    DELTA1= DELTA1+(Delta2(2:end,:) * X(i,:));
    
end

Theta2_grad = DELTA2./m;
Theta1_grad = DELTA1./m;

% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%
Theta2_grad(:,2:end) =  Theta2_grad(:,2:end) + (Theta2(:,2:end).*(lambda/m));
Theta1_grad[:,2:end] =  Theta1_grad(:,2:end) + (Theta1(:,2:end).*(lambda/m));

















% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
